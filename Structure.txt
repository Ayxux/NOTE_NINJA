/audio-transcription-summarization
    ├── app.py                      # Flask app backend entry point
    ├── requirements.txt            # Python dependencies
    ├── /static                     # Static files (CSS, JS, etc.)
    ├── /templates                  # HTML templates
    │   └── index.html              # Main UI for live transcription
    ├── /uploads                    # Directory for uploaded audio files
    └── /logs                       # Logs for debugging and error tracking



---

## File and Directory Breakdown

### 1. `app.py`
- **Purpose**: Main entry point for the Flask backend.
- **Contents**: Contains the routes for live transcription (`/`), audio file upload (`/upload_audio`), and possibly other backend logic (like summarization).
- **Description**: Initializes Flask, handles routes, integrates Whisper and Groq-Mistral models, and serves the UI.

### 2. `requirements.txt`
- **Purpose**: Specifies the required Python dependencies.
- **Contents**: Lists the Python libraries needed to run the project.
- **Description**: This file is used by `pip` to install the necessary dependencies in the environment. It includes Flask, Whisper, PyAudio, and any other third-party libraries required.

### 3. `/static`
- **Purpose**: Contains static assets (CSS, JavaScript, images, etc.) used in the application.
- **Contents**: This directory will hold all the non-Python files that need to be served statically by Flask.
  - **Example**: `style.css`, `app.js`
- **Description**: Flask automatically serves static files from this directory. It's used for styling the frontend (CSS) and handling dynamic client-side actions (JavaScript).

### 4. `/templates`
- **Purpose**: Stores HTML templates for rendering dynamic content in the frontend.
- **Contents**: This directory contains the HTML files that Flask will render and serve to the client.
  - **Example**: `index.html` – Main UI for the live transcription and audio upload.
- **Description**: Flask uses Jinja templating to dynamically render content. The `index.html` file will handle the interface for users to interact with the transcription features.

### 5. `/uploads`
- **Purpose**: Stores the uploaded audio files temporarily.
- **Contents**: This directory will hold audio files uploaded by users.
  - **Example**: `audio1.mp3`, `audio2.wav`
- **Description**: When users upload audio files, they are temporarily stored here before being processed by the Whisper transcription model. The files are either transcribed or summarized based on user interaction.

### 6. `/logs`
- **Purpose**: Holds logs for debugging and error tracking.
- **Contents**: Logs of the app’s runtime, error messages, and system output.
  - **Example**: `app.log`
- **Description**: This directory will contain logs generated by the Flask app. It's useful for monitoring the app’s behavior and debugging any issues related to transcription, summarization, or file uploads.

---

## File Example Breakdown

### `app.py` (Main Flask Backend File)
- **Functionality**: This file contains the main Flask application and routes.
  - **Routes**: 
    - `/`: Displays the UI for live transcription.
    - `/upload_audio`: Handles the file upload and calls the Whisper model for transcription, then Groq-Mistral for summarization.
    - Other routes might include `/live_transcription` for receiving live transcription text updates.

### `requirements.txt` (Dependencies File)
- **Libraries Included**: 
  - `Flask`: Web framework to build the backend.
  - `Flask-SocketIO`: To enable real-time communication between the backend and frontend.
  - `whisper`: To transcribe audio input into text.
  - `pyaudio`: To capture live audio from the microphone.
  - `requests`: For API calls to the LLM for summarization.
  - `numpy`: Required by Whisper for audio processing.
  
### `/static/style.css` (Frontend Styling)
- **Purpose**: Contains CSS styles for the UI.
  - Styling for the live transcription window, file upload buttons, and output summary sections.

### `/static/app.js` (Frontend JavaScript)
- **Purpose**: Handles frontend functionality.
  - **WebSocket handling**: Listens for live updates from Flask (real-time transcription).
  - **File Upload**: Manages the upload process for audio files.
  - **UI Updates**: Updates the live transcription text and summary display.

### `/templates/index.html` (Frontend UI)
- **Purpose**: HTML layout for the app’s frontend.
  - Includes forms for audio input (both live and upload).
  - Displays real-time transcription and summary results.

### `/uploads/` (Audio Storage)
- **Purpose**: Temporary directory for storing uploaded audio files.
  - Once files are uploaded, they are moved here before processing.
  
---

## Flow of Operations
1. **User Uploads Audio File**: 
   - Audio is uploaded via the frontend (via `index.html`).
   - Flask processes the file and stores it in `/uploads/`.
   - The file is passed to Whisper for transcription.
   
2. **Live Audio Transcription**:
   - The microphone input is captured in real-time and sent to the backend (using PyAudio and Flask-SocketIO).
   - Whisper continuously transcribes the speech, and Flask pushes updates to the frontend.

3. **Summarization**:
   - Once transcription is complete (or on demand for uploaded files), the transcription text is sent to Groq-Mistral for summarization.
   - The summary (with bullet points, timestamps, and action items) is returned to the frontend for display.

---

This structure should provide clarity on the organization of your project files and their specific purposes. Let me know if you need further details or changes!
